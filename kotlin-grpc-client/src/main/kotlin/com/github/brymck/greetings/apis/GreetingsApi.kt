/**
* Greeting
* This is a example OpenAPI spec to test performance implications of various protocols and server libraries 
*
* The version of the OpenAPI document: 0.0.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.github.brymck.greetings.apis

import com.github.brymck.greetings.models.Error
import com.github.brymck.greetings.models.Request

import com.github.brymck.greetings.infrastructure.ApiClient
import com.github.brymck.greetings.infrastructure.ClientException
import com.github.brymck.greetings.infrastructure.ClientError
import com.github.brymck.greetings.infrastructure.ServerException
import com.github.brymck.greetings.infrastructure.ServerError
import com.github.brymck.greetings.infrastructure.MultiValueMap
import com.github.brymck.greetings.infrastructure.RequestConfig
import com.github.brymck.greetings.infrastructure.RequestMethod
import com.github.brymck.greetings.infrastructure.ResponseType
import com.github.brymck.greetings.infrastructure.Success
import com.github.brymck.greetings.infrastructure.toMultiValue

class GreetingsApi(basePath: kotlin.String = "http://localhost:8080/v1") : ApiClient(basePath) {

    /**
    * Get a greeting
    * 
    * @param request Greeting request 
    * @return Request
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createGreeting(request: Request) : Request {
        val localVariableBody: kotlin.Any? = request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/greetings/",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val localVarResponse = request<Request>(
            localVariableConfig,
            localVariableBody
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Request
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> throw ClientException((localVarResponse as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((localVarResponse as ServerError<*>).message ?: "Server error")
        }
    }

}
